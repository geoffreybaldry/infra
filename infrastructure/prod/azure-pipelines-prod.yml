trigger:
  branches:
    include:
      - main
      - next
  paths: 
    include:
      - infrastructure/prod/*

pr:
  branches:
    include:
      - main
      - next
  paths:
    include:
      - infrastructure/prod/*

pool:
  name: Azure Pipelines

resources:
  repositories:
    - repository: build_templates
      type: github
      name: geoffreybaldry/build_templates
      endpoint: geoffreybaldry # The name of the github service connection
      #ref: refs/heads/next

variables:
- group: 'terraform-prod'
- name: terraform.version
  value: "latest"
  readonly: true
- name: project.folder
  value: "infrastructure/prod"
  readonly: true

stages:
  - stage: build

    jobs:
      - job: terraform_validate
        displayName: "Terraform Validate"
        steps:
          - template: terraform/install.yml@build_templates
            parameters:
              version: $(terraform.version)

          - template: terraform/init.yml@build_templates

          - template: terraform/validate.yml@build_templates

          #- task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV2@2
          #  displayName: 'Terraform: validate'
          #  inputs:
          #    workingDirectory: $(project_folder)
          #    provider: aws
          #    command: validate
          #    backendServiceAWS: 'AWS for Terraform Service Connection'

      - job: terraform_plan
        displayName: "Terraform Plan"
        dependsOn: terraform_validate
        steps:
          - template: terraform/install.yml@build_templates
            parameters:
              version: $(terraform.version)

          - template: terraform/init.yml@build_templates

          - task: Bash@3
            displayName: "Terraform: plan"
            env:
              AWS_ACCESS_KEY: $(aws_access_key)
              AWS_SECRET_KEY: $(aws_secret_key)
            inputs:
              targetType: "inline"
              workingDirectory: $(project.folder)
              script: |
                set -euo pipefail

                terraform plan \
                  -input=false \
                  -out=${BUILD_BUILDNUMBER}.tfplan 

          - template: terraform/publish_plan.yml@build_templates      

  - stage: deploy
    condition: |
      and(succeeded(),
      ne(variables['Build.Reason'], 'PullRequest'),
      eq(variables['Build.SourceBranch'], 'refs/heads/main'))
    jobs:
      - deployment: terraform
        condition: succeeded()
        displayName: "Terraform Deploy"
        environment: "prod"
        strategy:
          runOnce:
            deploy:
              steps:
                - template: terraform/extract_plan.yml@build_templates

                - template: terraform/install.yml@build_templates
                  parameters:
                    version: $(terraform.version)
                
                - task: Bash@3
                  displayName: "Terraform Apply"
                  env:
                    AWS_ACCESS_KEY: $(aws_access_key)
                    AWS_SECRET_KEY: $(aws_secret_key)
                  inputs:
                    targetType: "inline"
                    workingDirectory: $(project.folder)
                    script: |
                      set -euo pipefail

                      terraform apply \
                        -input=false \
                        ${BUILD_BUILDNUMBER}.tfplan 